/* c92ccb8fce47bc9fe310158ef890dc74739115a6
 * This file is automatically generated by graphql-let. */

import * as Types from '../../../__types__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {} as const;
export type Next_ArrivalsQueryVariables = Types.Exact<{
  stopIdentifier: Types.Scalars['String']['input'];
  lineCode: Types.Scalars['String']['input'];
}>;


export type Next_ArrivalsQuery = { __typename?: 'Query', next_arrivals: { __typename?: 'NextArrivalsResponse', message?: string | null, statusCode?: number | null, result?: Array<{ __typename?: 'NextArrivalsResult', line_description: string, flag_description: string, arrival: string, latitude: string, longitude: string, stop_latitude: string, stop_longitude: string, short_flag_description: string, flag_sign_description: string, is_adapted: string, car_identifier: string, driver_identifier: string, schedule_deviation: string, last_gps_date: string, error_message: string, stop_line_code: string, position: string }> | null } };


export const Next_ArrivalsDocument = gql`
    query Next_arrivals($stopIdentifier: String!, $lineCode: String!) {
  next_arrivals(stopIdentifier: $stopIdentifier, lineCode: $lineCode) {
    message
    statusCode
    result {
      line_description
      flag_description
      arrival
      latitude
      longitude
      stop_latitude
      stop_longitude
      short_flag_description
      flag_sign_description
      is_adapted
      car_identifier
      driver_identifier
      schedule_deviation
      last_gps_date
      error_message
      stop_line_code
      position
    }
  }
}
    `;

/**
 * __useNext_ArrivalsQuery__
 *
 * To run a query within a React component, call `useNext_ArrivalsQuery` and pass it any options that fit your needs.
 * When your component renders, `useNext_ArrivalsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useNext_ArrivalsQuery({
 *   variables: {
 *      stopIdentifier: // value for 'stopIdentifier'
 *      lineCode: // value for 'lineCode'
 *   },
 * });
 */
export function useNext_ArrivalsQuery(baseOptions: Apollo.QueryHookOptions<Next_ArrivalsQuery, Next_ArrivalsQueryVariables> & ({ variables: Next_ArrivalsQueryVariables; skip?: boolean; } | { skip: boolean; }) ) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<Next_ArrivalsQuery, Next_ArrivalsQueryVariables>(Next_ArrivalsDocument, options);
      }
export function useNext_ArrivalsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<Next_ArrivalsQuery, Next_ArrivalsQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<Next_ArrivalsQuery, Next_ArrivalsQueryVariables>(Next_ArrivalsDocument, options);
        }
export function useNext_ArrivalsSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<Next_ArrivalsQuery, Next_ArrivalsQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<Next_ArrivalsQuery, Next_ArrivalsQueryVariables>(Next_ArrivalsDocument, options);
        }
export type Next_ArrivalsQueryHookResult = ReturnType<typeof useNext_ArrivalsQuery>;
export type Next_ArrivalsLazyQueryHookResult = ReturnType<typeof useNext_ArrivalsLazyQuery>;
export type Next_ArrivalsSuspenseQueryHookResult = ReturnType<typeof useNext_ArrivalsSuspenseQuery>;
export type Next_ArrivalsQueryResult = Apollo.QueryResult<Next_ArrivalsQuery, Next_ArrivalsQueryVariables>;