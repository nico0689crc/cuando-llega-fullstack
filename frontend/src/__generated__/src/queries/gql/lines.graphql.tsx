/* 66f64e361bf22db0192ef47b417458b14f763760
 * This file is automatically generated by graphql-let. */

import * as Types from '../../../__types__';

import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';
const defaultOptions = {} as const;
export type LinesQueryVariables = Types.Exact<{
  page?: Types.InputMaybe<Types.Scalars['Int']['input']>;
  pageSize?: Types.InputMaybe<Types.Scalars['Int']['input']>;
}>;


export type LinesQuery = { __typename?: 'Query', lines: { __typename?: 'LinesResponse', message?: string | null, statusCode?: number | null, result?: { __typename?: 'LinesFindAllResponse', totalItems: number, totalPages: number, currentPage: number, pageSize: number, data: Array<{ __typename?: 'Line', code: string, description: string, stopLines?: Array<{ __typename?: 'StopLine', stopCode: string, lineCode: string, lineDescription: string, abbreviationFlag: string, expandedAbbreviationFlag: string, abbreviationFlagGit: string, position: number, stop?: { __typename?: 'Stop', description: string, lat: string, lng: string, identificator: string, code: string } | null }> | null }> } | null } };


export const LinesDocument = gql`
    query Lines($page: Int, $pageSize: Int) {
  lines(page: $page, pageSize: $pageSize) {
    message
    statusCode
    result {
      totalItems
      totalPages
      currentPage
      pageSize
      data {
        code
        description
        stopLines {
          stopCode
          lineCode
          lineDescription
          abbreviationFlag
          expandedAbbreviationFlag
          abbreviationFlagGit
          position
          stop {
            description
            lat
            lng
            identificator
            code
          }
        }
      }
    }
  }
}
    `;

/**
 * __useLinesQuery__
 *
 * To run a query within a React component, call `useLinesQuery` and pass it any options that fit your needs.
 * When your component renders, `useLinesQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useLinesQuery({
 *   variables: {
 *      page: // value for 'page'
 *      pageSize: // value for 'pageSize'
 *   },
 * });
 */
export function useLinesQuery(baseOptions?: Apollo.QueryHookOptions<LinesQuery, LinesQueryVariables>) {
        const options = {...defaultOptions, ...baseOptions}
        return Apollo.useQuery<LinesQuery, LinesQueryVariables>(LinesDocument, options);
      }
export function useLinesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<LinesQuery, LinesQueryVariables>) {
          const options = {...defaultOptions, ...baseOptions}
          return Apollo.useLazyQuery<LinesQuery, LinesQueryVariables>(LinesDocument, options);
        }
export function useLinesSuspenseQuery(baseOptions?: Apollo.SkipToken | Apollo.SuspenseQueryHookOptions<LinesQuery, LinesQueryVariables>) {
          const options = baseOptions === Apollo.skipToken ? baseOptions : {...defaultOptions, ...baseOptions}
          return Apollo.useSuspenseQuery<LinesQuery, LinesQueryVariables>(LinesDocument, options);
        }
export type LinesQueryHookResult = ReturnType<typeof useLinesQuery>;
export type LinesLazyQueryHookResult = ReturnType<typeof useLinesLazyQuery>;
export type LinesSuspenseQueryHookResult = ReturnType<typeof useLinesSuspenseQuery>;
export type LinesQueryResult = Apollo.QueryResult<LinesQuery, LinesQueryVariables>;